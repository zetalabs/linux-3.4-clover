/*
************************************************************************************************************************
*                                                         eGON
*                                         the Embedded GO-ON Bootloader System
*
*                             Copyright(C), 2006-2008, SoftWinners Microelectronic Co., Ltd.
*											       All Rights Reserved
*
* File Name   : boo1.h
*
* Author      : Gary.Wang
*
* Version     : 1.1.0
*
* Date        : 2009.05.21
*
* Description :
*
* Others      : None at present.
*
*
* History     :
*
*  <Author>        <time>       <version>      <description>
*
* Gary.Wang      2009.05.21       1.1.0        build the file
*
************************************************************************************************************************
*/
#ifndef  __boo1_h
#define  __boo1_h


#include "boot0_v2.h"
#if 0
typedef struct _boot_dram_para_t
{
    unsigned int           dram_baseaddr;
    unsigned int           dram_clk;
    unsigned int           dram_type;
    unsigned int           dram_rank_num;
    unsigned int           dram_chip_density;
    unsigned int           dram_io_width;
    unsigned int		   dram_bus_width;
    unsigned int           dram_cas;
    unsigned int           dram_zq;
    unsigned int           dram_odt_en;
    unsigned int 		   dram_size;
    unsigned int           dram_tpr0;
    unsigned int           dram_tpr1;
    unsigned int           dram_tpr2;
    unsigned int           dram_tpr3;
    unsigned int           dram_tpr4;
    unsigned int           dram_tpr5;
    unsigned int    	   dram_emr1;
    unsigned int           dram_emr2;
    unsigned int           dram_emr3;
}boot_dram_para_t;
#endif
typedef struct _boot_core_para_t
{
    unsigned int  user_set_clock;                 // 运行频率 M单位
    unsigned int  user_set_core_vol;              // 核心电压 mV单位
    unsigned int  vol_threshold;                  // 开机门限电压
}
boot_core_para_t;
/******************************************************************************/
/*                              file head of Boot1                            */
/******************************************************************************/
typedef struct _boot1_private_head_t
{
	unsigned int              prvt_head_size;
	unsigned char               prvt_head_vsn[4];                // the version of Boot1_private_hea
	int						uart_port;              // UART控制器编号
	normal_gpio_cfg             uart_ctrl[2];           // UART控制器(调试打印口)GPIO信息
	boot_dram_para_t      		dram_para;              // dram init para
	char                        script_buf[32 * 1024];  // 脚本参数
	boot_core_para_t            core_para;              // 关键参数
	int						twi_port;               // TWI控制器编号
	normal_gpio_cfg             twi_ctrl[2];            // TWI控制器GPIO信息，用于控制TWI
	int						debug_enable;           // debug使能参数
    int                       hold_key_min;           // hold key最小值
    int                       hold_key_max;           // hold key最大值
    unsigned int                       work_mode;              // 模式，区分量产还是升级
    unsigned int                       storage_type;           // 存储介质类型  0：nand   1：sdcard    2: spinor
    normal_gpio_cfg             storage_gpio[32];       // 存储设备 GPIO信息
    char                        storage_data[512 - sizeof(normal_gpio_cfg) * 32];      // 用户保留数据信息
    //boot_nand_connect_info_t    nand_connect_info;    // nand 参数
}boot1_private_head_t;

typedef struct _Boot_file_head
{
	unsigned int  jump_instruction;   // one intruction jumping to real code
	unsigned char   magic[8];           // ="eGON.BT0" or "eGON.BT1",  not C-style string.
	unsigned int  check_sum;          // generated by PC
	unsigned int  length;             // generated by PC
	unsigned int  boot1_length;       // the size of boot_file_head_t
	unsigned int  align_size;         // the align size of boot1
	unsigned char   file_head_vsn[4];   // the version of boot0_file_head_t or boot1_file_head_t
	unsigned char   Boot_vsn[4];        // Boot version
	unsigned char   eGON_vsn[4];        // eGON version
	unsigned char   platform[8];        // platform information
}boot_file_head_t;


typedef struct _boot1_file_head_t
{
	boot_file_head_t      boot_head;
	boot1_private_head_t  prvt_head;
}boot1_file_head_t;


#endif     //  ifndef __boo1_h

/* end of boo1.h */
